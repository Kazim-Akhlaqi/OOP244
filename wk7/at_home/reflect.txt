/**********************************************************
// OOP244 Workshop 7: Derived Classes
// file reflext.txt
// Version: at_home
// Date July/16/2018
// Student: Kazim Akhlaqi
// Student_ID: 103638177
// Student_Email: kakhlaqi@myseneca.ca
// Section: OOP244 SAB
// Description:
***********************************************************/
1. Does the Hero class need to know about the existence of the SuperHero class? 

No, since super hero is derived from hero class, therefor hero is not dependent
on supper hero class and doesnot need to know about existence of super hero class.

2. Does the SuperHero class need to know about the existence of the Hero class? 

Yes, ssince super hero is derived from hero class, therefore super hero class
is not dependent on hero class and it does need to know about existence of hero class.

3. The program prints out “Ancient Battle!” when 2 Heroes fight.
   It prints out “Super Fight!” when 2 SuperHeroes fight.
   When you tried to make a Hero fight a SuperHero, what did it print out?
   
Ancient Battle! Hector vs WonderWoman : Winner is WonderWoman in 6 rounds.

4. True or False: are the following definitions for main valid? 
   int main() {
		Hero("Achilles", 20, 6) * Hero("Hector", 30, 5);
   }

how about this?
   int main() {
       (Hero("Achilles", 20, 6) * Hero("Hector", 30, 5)) * (Hero("Atalanta", 10, 3) * Hero("Hippolyta", 10, 2));
   }

Yes, both definitions could be valid if the values past to consturctor are valid.

***********************************************************
Quiz 7 Reflection:

2. private - bars all access
   protected - limits access to derived classes only
   public - unlimited access

3. Shadowing in context of derived class happens when a member function of a derived class 
shadows the member function(s) of its base class with the same name. 
For example The person base class and student derived classe both have the seme display() member functions.
which in this case the student class stdisplay() function shadows the person class display() function:
for any object of Student type:
class Person {
  public:
     void display(std::ostream&) const; 
 };

 class Student : public Person {
   public:
     void display(std::ostream&) const;
 };